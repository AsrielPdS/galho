export const is = (value, type) => value instanceof type;
export const isS = (value) => typeof value === 'string';
export const isF = (value) => typeof value === 'function';
export const isO = (value) => typeof value === "object";
export const isN = (value) => typeof value === "number";
export const isB = (value) => typeof value === "boolean";
export const isU = (value) => value === undefined;
export const isP = (value) => value && isF(value.then);
export const isA = (value) => Array.isArray(value);
export const wait = (ms) => new Promise(r => setTimeout(r, ms));
export const assign = Object.assign;
export function extend(obj, extension, override) {
    for (let key in extension) {
        let e = extension[key];
        isU(e) || ((override || isU(obj[key])) && (obj[key] = e));
    }
    return obj;
}
export const clone = (v) => assign({}, v);
export function delay(index, cb, time) {
    clearTimeout(index);
    return setTimeout(cb, time);
}
export const toStr = (v) => v == null ? v + "" : "";
export const def = (value, def) => isU(value) ? def : value;
export const t = (value) => value !== false;
export function call(v, cb) {
    cb(v);
    return v;
}
export const sub = (arr, key) => arr.map(v => v?.[key]);
export const distinct = (arr) => arr.filter((f, i) => {
    return arr.indexOf(f, i + 1) == -1;
});
export const z = (a) => a[l(a) - 1];
export const filter = (arr, filter) => arr.filter(filter || (v => v));
export const l = (a) => a.length;
export const arr = (v) => isA(v) ? v : v === undefined ? [] : [v];
export const lazy = (value) => isF(value) ? value() : value;
export function iByKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return i;
    return -1;
}
export function byKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return arr[i];
    return null;
}
export const create = (constructor, obj, ...a) => assign(new constructor(...a), obj), json = JSON.stringify, edate = (d) => [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
const _fmtc = new Intl.NumberFormat(void 0, { style: "currency", currency: "AOA" }), _fmtp = new Intl.NumberFormat(void 0, { style: "percent" }), _fmtd = new Intl.DateTimeFormat(void 0, { dateStyle: "short" }), _fmtt = new Intl.DateTimeFormat(void 0, { timeStyle: "short" }), _fmtm = new Intl.DateTimeFormat(void 0, { year: "numeric", month: "long" }), _fmtn = new Intl.NumberFormat(), _fmtDT = new Intl.DateTimeFormat(void 0, { dateStyle: "short", timeStyle: "short" });
export const fmtd = (v) => _fmtd.format(v), fmtt = (v) => _fmtt.format(v), fmtm = (v) => _fmtm.format(v), fmtDT = (v) => _fmtDT.format(v), fmtc = (v) => _fmtc.format(v), fmtp = (v) => _fmtp.format(v), fmtn = (v) => _fmtn.format(v), fmts = {
    d: fmtd, t: fmtt, D: fmtDT,
    c: fmtc, f: fmtn, p: fmtp,
    n: fmtn,
};
export function fmt(v, pattern) {
    isS(v) && (v = new Date());
    return fmts[pattern ||= isN(v) ? "n" : v.getHours() || v.getMinutes() ? "D" : "d"](v);
}
export const concat = (separator, ...parts) => parts.filter(p => p != null).join(separator);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFtQixLQUFVLEVBQUUsSUFBOEIsRUFBYyxFQUFFLENBQUMsS0FBSyxZQUFZLElBQUksQ0FBQztBQUV0SCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQWdCLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFFM0UsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFxQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0FBR2xGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBZ0IsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUUzRSxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQW1CLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFFOUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBRWhGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBc0IsRUFBRSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7QUFFM0UsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUE2QixFQUFFLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQVUsS0FBVSxFQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvRSxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFR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