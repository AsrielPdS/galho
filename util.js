export const is = (value, type) => value instanceof type;
export const isS = (value) => typeof value === 'string';
export const isF = (value) => typeof value === 'function';
export const isO = (value) => typeof value === "object";
export const isN = (value) => typeof value === "number";
export const isB = (value) => typeof value === "boolean";
export const isU = (value) => value === undefined;
export const isP = (value) => value && isF(value.then);
export const isA = (value) => Array.isArray(value);
export const wait = (ms) => new Promise(r => setTimeout(r, ms));
export const assign = Object.assign;
export function extend(obj, extension, override = true) {
    for (let key in extension) {
        let e = extension[key];
        isU(e) || ((override || isU(obj[key])) && (obj[key] = e));
    }
    return obj;
}
export const clone = (v) => assign({}, v);
export function delay(index, cb, time) {
    clearTimeout(index);
    return setTimeout(cb, time);
}
export const toStr = (v) => v == null ? v + "" : "";
export const def = (value, def) => isU(value) ? def : value;
export const t = (value) => value !== false;
export function call(v, cb) {
    cb(v);
    return v;
}
export const sub = (arr, key) => arr.map(v => v?.[key]);
export const distinct = (arr) => arr.filter((f, i) => {
    return arr.indexOf(f, i + 1) == -1;
});
export const z = (a) => a[l(a) - 1];
export const filter = (arr, filter) => arr.filter(filter || (v => v));
export const l = (a) => a.length;
export const arr = (v) => isA(v) ? v : v === undefined ? [] : [v];
export const lazy = (value) => isF(value) ? value() : value;
export function iByKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return i;
    return -1;
}
export function byKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return arr[i];
    return null;
}
export const create = (constructor, obj, ...a) => assign(new constructor(...a), obj), json = JSON.stringify, edate = (d) => [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
const _fmtc = new Intl.NumberFormat(void 0, { style: "currency", currency: "AOA" }), _fmtp = new Intl.NumberFormat(void 0, { style: "percent" }), _fmtd = new Intl.DateTimeFormat(void 0, { dateStyle: "short" }), _fmtt = new Intl.DateTimeFormat(void 0, { timeStyle: "short" }), _fmtm = new Intl.DateTimeFormat(void 0, { year: "numeric", month: "long" }), _fmtn = new Intl.NumberFormat(), _fmtDT = new Intl.DateTimeFormat(void 0, { dateStyle: "short", timeStyle: "short" });
export const fmtd = (v) => _fmtd.format(v), fmtt = (v) => _fmtt.format(v), fmtm = (v) => _fmtm.format(v), fmtDT = (v) => _fmtDT.format(v), fmtc = (v) => _fmtc.format(v), fmtp = (v) => _fmtp.format(v), fmtn = (v) => _fmtn.format(v), fmts = {
    d: fmtd, t: fmtt, D: fmtDT,
    c: fmtc, f: fmtn, p: fmtp,
    n: fmtn,
};
export function fmt(v, pattern) {
    isS(v) && (v = new Date());
    return fmts[pattern ||= isN(v) ? "n" : v.getHours() || v.getMinutes() ? "D" : "d"](v);
}
export const concat = (separator, ...parts) => parts.filter(p => p != null).join(separator);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFtQixLQUFVLEVBQUUsSUFBOEIsRUFBYyxFQUFFLENBQUMsS0FBSyxZQUFZLElBQUksQ0FBQztBQUV0SCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQWdCLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFFM0UsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFxQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0FBR2xGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBZ0IsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUUzRSxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQW1CLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFFOUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBRWhGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBc0IsRUFBRSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7QUFFM0UsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUE2QixFQUFFLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQVUsS0FBVSxFQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvRSxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFR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