export const is = (value, type) => value instanceof type;
/**is string */
export const isS = (value) => typeof value === 'string';
/**is function */
export const isF = (value) => typeof value === 'function';
/** is object */
export const isO = (value) => typeof value === "object";
/**is number */
export const isN = (value) => typeof value === "number";
/** is boolean */
export const isB = (value) => typeof value === "boolean";
/** is undefined */
export const isU = (value) => value === undefined;
/** is promise like */
export const isP = (value) => value && isF(value.then);
/** is array */
export const isA = (value) => Array.isArray(value);
export const wait = (ms) => new Promise(r => setTimeout(r, ms));
export const assign = Object.assign;
export function extend(obj, extension, override) {
    for (let key in extension) {
        let e = extension[key];
        isU(e) || ((override || isU(obj[key])) && (obj[key] = e));
    }
    return obj;
}
export const clone = (v) => assign({}, v);
export function delay(index, cb, time) {
    clearTimeout(index);
    return setTimeout(cb, time);
}
/**toString, obs null and undefined return an ""(empty string) */
export const toStr = (v) => v == null ? v + "" : "";
/**return def if value is undefined */
export const def = (value, def) => isU(value) ? def : value;
/**returns true if value is not false ie.(value===false) t stands for true*/
export const t = (value) => value !== false;
export function call(v, cb) {
    cb(v);
    return v;
}
export const sub = (arr, key) => arr.map(v => v?.[key]);
export const distinct = (arr) => arr.filter((f, i) => {
    return arr.indexOf(f, i + 1) == -1;
});
/**get last item of array */
export const z = (a) => a[l(a) - 1];
export const filter = (arr, filter) => arr.filter(filter || (v => v));
/**get length of array */
export const l = (a) => a.length;
export const arr = (v) => isA(v) ? v : v === undefined ? [] : [v];
export const lazy = (value) => isF(value) ? value() : value;
export function iByKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return i;
    return -1;
}
export function byKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return arr[i];
    return null;
}
export const create = (constructor, obj, ...a) => assign(new constructor(...a), obj), json = JSON.stringify, 
/**explode date */
edate = (d) => [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
const _fmtc = new Intl.NumberFormat(void 0, { style: "currency", currency: "AOA" }), _fmtp = new Intl.NumberFormat(void 0, { style: "percent", maximumFractionDigits: 1 }), _fmtd = new Intl.DateTimeFormat(void 0, { dateStyle: "short" }), _fmtt = new Intl.DateTimeFormat(void 0, { timeStyle: "short" }), _fmtm = new Intl.DateTimeFormat(void 0, { year: "numeric", month: "long" }), _fmtn = new Intl.NumberFormat(), _fmtDT = new Intl.DateTimeFormat(void 0, { dateStyle: "short", timeStyle: "short" });
export const 
/**format date*/
fmtd = (v) => v == null ? "" : _fmtd.format(v), 
/**format time */
fmtt = (v) => v == null ? "" : _fmtt.format(v), 
/**format month */
fmtm = (v) => v == null ? "" : _fmtm.format(v), 
/**format date & time */
fmtDT = (v) => v == null ? "" : _fmtDT.format(v), 
/**format currency */
fmtc = (v) => v == null ? "" : _fmtc.format(v), 
/**format percent */
fmtp = (v) => v == null ? "" : _fmtp.format(v), 
/**format number */
fmtn = (v) => v == null ? "" : _fmtn.format(v), fmts = {
    d: fmtd, t: fmtt, D: fmtDT,
    c: fmtc, f: fmtn, p: fmtp,
    n: fmtn,
};
export function fmt(v, pattern) {
    isS(v) && (v = new Date());
    return fmts[pattern ||= isN(v) ? "n" : v.getHours() || v.getMinutes() ? "D" : "d"](v);
}
export const concat = (separator, ...parts) => parts.filter(p => p != null).join(separator);
//# sourceMappingURL=data:application/json;base64,