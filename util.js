"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fmt = exports.fmts = exports.fmtn = exports.fmtp = exports.fmtc = exports.fmtDT = exports.fmtt = exports.fmtd = exports.date = exports.json = exports.create = exports.byKey = exports.iByKey = exports.lazy = exports.arr = exports.l = exports.filter = exports.z = exports.distinct = exports.sub = exports.call = exports.t = exports.def = exports.toStr = exports.delay = exports.extend = exports.assign = exports.wait = exports.isA = exports.isP = exports.isU = exports.isB = exports.isN = exports.isO = exports.isF = exports.isS = void 0;
const isS = (value) => typeof value === 'string';
exports.isS = isS;
const isF = (value) => typeof value === 'function';
exports.isF = isF;
const isO = (value) => typeof value === "object";
exports.isO = isO;
const isN = (value) => typeof value === "number";
exports.isN = isN;
const isB = (value) => typeof value === "boolean";
exports.isB = isB;
const isU = (value) => value === undefined;
exports.isU = isU;
const isP = (value) => value && (0, exports.isF)(value.then);
exports.isP = isP;
const isA = (value) => Array.isArray(value);
exports.isA = isA;
const wait = (ms) => new Promise(r => setTimeout(r, ms));
exports.wait = wait;
exports.assign = Object.assign;
function extend(obj, extension, override = true) {
    for (let key in extension) {
        let e = extension[key];
        (0, exports.isU)(e) || ((override || (0, exports.isU)(obj[key])) && (obj[key] = e));
    }
    return obj;
}
exports.extend = extend;
function delay(index, cb, time) {
    clearTimeout(index);
    return setTimeout(cb, time);
}
exports.delay = delay;
const toStr = (v) => v == null ? v + "" : "";
exports.toStr = toStr;
const def = (value, def) => (0, exports.isU)(value) ? def : value;
exports.def = def;
const t = (value) => value !== false;
exports.t = t;
function call(v, cb) {
    cb(v);
    return v;
}
exports.call = call;
const sub = (arr, key) => arr.map(v => v?.[key]);
exports.sub = sub;
const distinct = (arr) => arr.filter((f, i) => {
    return arr.indexOf(f, i + 1) == -1;
});
exports.distinct = distinct;
const z = (a) => a[(0, exports.l)(a) - 1];
exports.z = z;
const filter = (arr, filter) => arr.filter(filter || (v => v));
exports.filter = filter;
const l = (a) => a.length;
exports.l = l;
const arr = (v) => (0, exports.isA)(v) ? v : v === undefined ? [] : [v];
exports.arr = arr;
const lazy = (value) => (0, exports.isF)(value) ? value() : value;
exports.lazy = lazy;
function iByKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return i;
    return -1;
}
exports.iByKey = iByKey;
function byKey(arr, name, key = "key", i = 0) {
    for (; i < arr.length; i++)
        if (name === arr[i][key])
            return arr[i];
    return null;
}
exports.byKey = byKey;
const create = (constructor, obj) => (0, exports.assign)(new constructor(), obj), date = (d) => [d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds()];
exports.create = create, exports.json = JSON.stringify, exports.date = date;
const _fmtc = new Intl.NumberFormat("pt", { style: "currency", currency: "AOA" }), _fmtp = new Intl.NumberFormat("pt", { style: "percent" }), _fmtd = new Intl.DateTimeFormat("pt", { dateStyle: "short" }), _fmtt = new Intl.DateTimeFormat("pt", { timeStyle: "short" }), _fmtn = new Intl.NumberFormat(), _fmtDT = new Intl.DateTimeFormat("pt", { dateStyle: "short", timeStyle: "short" });
const fmtd = (v) => _fmtd.format(v), fmtt = (v) => _fmtt.format(v), fmtDT = (v) => _fmtDT.format(v), fmtc = (v) => _fmtc.format(v), fmtp = (v) => _fmtp.format(v), fmtn = (v) => _fmtn.format(v);
exports.fmtd = fmtd, exports.fmtt = fmtt, exports.fmtDT = fmtDT, exports.fmtc = fmtc, exports.fmtp = fmtp, exports.fmtn = fmtn, exports.fmts = {
    d: exports.fmtd, t: exports.fmtt, D: exports.fmtDT,
    c: exports.fmtc, f: exports.fmtn, p: exports.fmtp,
    n: exports.fmtn,
};
function fmt(v, pattern) {
    (0, exports.isS)(v) && (v = new Date());
    return exports.fmts[pattern ||= (0, exports.isN)(v) ? "n" : v.getHours() || v.getMinutes() ? "D" : "d"](v);
}
exports.fmt = fmt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBdUJPLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFnQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQTlELFFBQUEsR0FBRyxPQUEyRDtBQUVwRSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBcUIsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFVBQVUsQ0FBQztBQUFyRSxRQUFBLEdBQUcsT0FBa0U7QUFHM0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQWdCLEVBQUUsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFBOUQsUUFBQSxHQUFHLE9BQTJEO0FBRXBFLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBVSxFQUFtQixFQUFFLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDO0FBQWpFLFFBQUEsR0FBRyxPQUE4RDtBQUV2RSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBb0IsRUFBRSxDQUFDLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FBQztBQUFuRSxRQUFBLEdBQUcsT0FBZ0U7QUFFekUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFVLEVBQXNCLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQTlELFFBQUEsR0FBRyxPQUEyRDtBQUVwRSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQVUsRUFBNkIsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFBLFdBQUcsRUFBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFBMUUsUUFBQSxHQUFHLE9BQXVFO0FBRWhGLE1BQU0sR0FBRyxHQUFHLENBQVUsS0FBVSxFQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUFsRSxRQUFBLEdBQUcsT0FBK0Q7QUFDeEUsTUFBTSxJQUFJLEdBQUcsQ0FB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